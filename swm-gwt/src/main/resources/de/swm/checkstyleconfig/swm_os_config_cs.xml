<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: SWM Checks für Plugin
    Description: HINWEIS: Die Checks "de.unkrig.cscontrib..." benötigen das entsprechende ECLIPSE-Plugin, welches von
                 der Update-Site "http://cs-contrib.unkrig.de/update" gezogen werden muss.
-->
<module name="Checker">
  <property name="severity" value="warning"/>
  <property name="localeLanguage" value="de"/>
  <property name="charset" value="UTF-8"/>
  <module name="TreeWalker">
    <module name="FileContentsHolder"/>
    <module name="JavadocMethod">
      <property name="scope" value="package" />
      <property name="allowMissingPropertyJavadoc" value="true"/>
      <property name="allowUndeclaredRTE" value="true"/>
      <property name="logLoadErrors" value="true"/>
      <property name="suppressLoadErrors" value="true"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Stellt sicher, dass Methoden (inkl. Konstruktoren) JavaDoc-Kommentare inkl. @param, @return und ggf. @throws-Tag besitzen."/>
    </module>
    <module name="JavadocType">
      <property name="allowUnknownTags" value="true"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt JavaDoc-Kommentare für Klassen und Interfaces."/>
    </module>
    <module name="JavadocVariable">
      <property name="scope" value="public"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt JavaDoc-Kommentare für Instanz- und Klassenvariablen, die public sind"/>
    </module>
    <module name="ConstantName">
      <property name="format" value="^[A-Z][A-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Name der Konstanten entspricht nicht  den Namenskonventionen."/>
    </module>
    <module name="LocalFinalVariableName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Variablenname entspricht nicht  den Namenskonventionen."/>
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Variablenname entspricht nicht  den Namenskonventionen."/>
    </module>
    <module name="MemberName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Name der Instanzvariable entspricht nicht den Namenskonventionen"/>
    </module>
    <module name="MethodName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Methodennamen entspricht nicht  den Namenskonventionen."/>
    </module>
    <module name="PackageName">
      <property name="format" value="^de.swm.[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Package-Name entspricht nicht der Vorgabe de.swm.&lt;ANWENDUNGSNAME&gt;."/>
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Parametername entspricht nicht  den Namenskonventionen."/>
    </module>
    <module name="StaticVariableName">
      <property name="format" value="^[a-z][a-zA-Z0-9_]*$"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Klassenvariablenname entspricht nicht den Namenskonventionen."/>
    </module>
    <module name="LineLength">
      <property name="max" value="120"/>
      <property name="tabWidth" value="4"/>
      <message key="maxLineLen" value="Zeile länger als 120 Zeichen"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Legt maximale Zeilenlänge auf 100 Zeichen fest."/>
    </module>
    <module name="LeftCurly">
      <property name="maxLineLength" value="120"/>
      <property name="tokens" value="LITERAL_CATCH,CLASS_DEF,CTOR_DEF,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,INTERFACE_DEF,METHOD_DEF,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt, dass linke geschweifte Klammer stets in derselben Linie wie auslÃ¶sende(s) Schlüsselwort / Deklaration steht"/>
    </module>
    <module name="NeedBraces">
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt geschweifte Klammern für do-, else-, if-, for- und while-Schlüsselwort"/>
    </module>
    <module name="EmptyStatement"/>
    <module name="MagicNumber">
      <property name="severity" value="ignore"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Verhindert feste Konstanten im Code."/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <module name="VisibilityModifier">
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt, dass Instanzvariablen private sind."/>
    </module>
    <module name="InterfaceIsType">
      <property name="severity" value="ignore"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erlaubt keine Interfaces, die nur Konstanten und keine Methoden enthalten und somit keine Schnittstelle darstellen. (Marker-Interfaces sind zugelassen)."/>
      <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
    </module>
    <module name="TypeName">
      <property name="format" value="^[A-Z][a-zA-Z0-9_]*$"/>
      <property name="tokens" value="CLASS_DEF"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Klassenname entspricht nicht den Namenskonventionen."/>
    </module>
    <module name="JavadocStyle">
      <property name="checkEmptyJavadoc" value="true"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Überprüft JavaDoc-Kommentare auf Korrektheit."/>
    </module>
    <module name="WriteTag">
      <property name="tag" value="copyright"/>
      <property name="tagFormat" value=".*"/>
      <property name="tagSeverity" value="ignore"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erzwingt @copyright-Tag für Klassen und Interfaces"/>
    </module>
    <module name="RightCurly">
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erwzingt, dass nach  '}' für try-, catch-, finally-, if- und else- Schlüsselwort das nächste Statement in derselben Linie steht."/>
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="8"/>
      <property name="caseIndent" value="8"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Einrückung inkorrekt."/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Überprüft korrekte Einrückung."/>
    </module>
    <module name="PackageDeclaration">
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Erwzwingt Verwendung eines eigenen Packages."/>
    </module>
    <module name="TypeName">
      <property name="format" value="^[A-Z][a-zA-Z0-9_]*$"/>
      <property name="tokens" value="INTERFACE_DEF"/>
      <metadata name="com.atlassw.tools.eclipse.checkstyle.customMessage" value="Name des Interface entspricht nicht den Namenskonventionen."/>
    </module>
    <module name="ModifierOrder">
      <metadata name="com.atlassw.tools.eclipse.checkstyle.comment" value="Stellt sicher, dass Modifier in richtiger Ordnung verwendet werden."/>
    </module>
    <module name="OneStatementPerLine"/>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Lässt keine Leerzeichen zur Einrückung zu"/>
      <property name="format" value="^( +)(.*)"/>
      <property name="message" value="Zum Einrücken werden Leerzeichen verwendet."/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="RegexpSinglelineJava">
      <metadata name="net.sf.eclipsecs.core.comment" value="Lässt Standardausgabe nicht zum Loggen zu."/>
      <property name="format" value="System.out|System.err"/>
      <property name="message" value="Standardausgabe anstelle von Logger verwendet."/>
      <property name="ignoreComments" value="true"/>
    </module>
    <module name="de.unkrig.cscontrib.checks.NameSpelling">
      <metadata name="net.sf.eclipsecs.core.comment" value="Annotation"/>
      <property name="elements" value="annotation"/>
      <property name="option" value="require"/>
      <property name="format" value="^[A-Z][A-Za-z0-9]*(?:[A-Z][A-Za-z0-9]*)*$"/>
    </module>
    <module name="de.unkrig.cscontrib.checks.NameSpelling">
      <metadata name="net.sf.eclipsecs.core.comment" value="Annotation Field"/>
      <property name="elements" value="annotation_field"/>
      <property name="option" value="require"/>
      <property name="format" value="^[a-z][a-z0-9]*(?:[A-Z][A-Za-z0-9]*)*$"/>
  </module>
    <module name="de.unkrig.cscontrib.checks.NameSpelling">
      <metadata name="net.sf.eclipsecs.core.comment" value="Enum"/>
      <property name="elements" value="enum"/>
      <property name="option" value="require"/>
      <property name="format" value="^[A-Z][A-Za-z0-9]*(?:[A-Z][A-Za-z0-9]*)*$"/>
    </module>
    <module name="de.unkrig.cscontrib.checks.NameSpelling">
      <metadata name="net.sf.eclipsecs.core.comment" value="Enum Constant"/>
      <property name="elements" value="enum_constant"/>
      <property name="option" value="require"/>
      <property name="format" value="^[A-Z][A-Z0-9]*(?:_[A-Z0-9]+)*$"/>
    </module>
    <module name="de.unkrig.cscontrib.checks.ZeroParameterSuperconstructorInvocation"/>
    <module name="de.unkrig.cscontrib.checks.InnerAssignment"/>
    <module name="de.unkrig.cscontrib.checks.Whitespace">
      <property name="whitespaceBefore" value="and__expr,and__type_bound,and_assign,assert,assign__assignment,assign__var_decl,break,case,catch,class__class_decl,colon__enhanced_for,colon__ternary,conditional_and,conditional_or,continue,default__anno_elem,default__switch,divide,divide_assign,do,else,enum,equal,extends__type,extends__type_bound,finally,for,greater,greater_equal,if,implements,import,import__static_import,instanceof,l_angle__meth_decl_type_params,l_curly__anon_class,l_curly__block,l_curly__catch,l_curly__do,l_curly__empty_anon_class,l_curly__empty_catch,l_curly__empty_meth_decl,l_curly__empty_type_decl,l_curly__enum_const,l_curly__finally,l_curly__for,l_curly__if,l_curly__instance_init,l_curly__labeled_stat,l_curly__meth_decl,l_curly__static_init,l_curly__switch,l_curly__synchronized,l_curly__try,l_curly__type_decl,l_curly__while,l_paren__catch,l_paren__do_while,l_paren__for,l_paren__for_no_init,l_paren__if,left_shift,left_shift_assign,less,less_equal,minus__additive,minus_assign,modulo,modulo_assign,multiply,multiply_assign,name__ctor_decl,name__meth_decl,name__param,name__type_decl,name__local_var_decl,not_equal,or,or_assign,package,plus__additive,plus_assign,question__ternary,r_curly__anno_array_init,r_curly__anon_class,r_curly__array_init,r_curly__block,r_curly__catch,r_curly__do,r_curly__else,r_curly__finally,r_curly__for,r_curly__if,r_curly__instance_init,r_curly__labeled_stat,r_curly__meth_decl,r_curly__static_init,r_curly__switch,r_curly__synchronized,r_curly__try,r_curly__type_decl,r_curly__while,return__expr,return__no_expr,right_shift,right_shift_assign,semi__type_decl,static__static_import,static__static_init,super__ctor_call,super__type_bound,switch,synchronized__mod,synchronized__synchronized,this__ctor_call,throw,throws,try,unsigned_right_shift,unsigned_right_shift_assign,void,while__do,while__while,xor,xor_assign"/>
      <property name="noWhitespaceBefore" value="class__class_literal,colon__case,colon__default,colon__labeled_stat,comma,dot__import,dot__package_decl,dot__qualified_type,dot__selector,ellipsis,l_angle__meth_invocation_type_args,l_angle__type_args,l_angle__type_params,l_brack__array_decl,l_brack__index,l_paren__anno,l_paren__anno_elem_decl,l_paren__meth_invocation,l_paren__params,name__anno,post_decr,post_incr,r_angle__meth_decl_type_params,r_angle__meth_invocation_type_args,r_angle__type_args,r_angle__type_params,r_brack__array_decl,r_brack__index,r_curly__empty_anno_array_init,r_curly__empty_anon_class,r_curly__empty_array_init,r_curly__empty_catch,r_curly__empty_meth_decl,r_curly__empty_type_decl,r_curly__enum_const_decl,r_paren__anno,r_paren__anno_elem_decl,r_paren__cast,r_paren__catch,r_paren__do_while,r_paren__for,r_paren__for_no_update,r_paren__if,r_paren__meth_invocation,r_paren__params,semi__abstract_meth_decl,semi__anno_elem_decl,semi__enum_decl,semi__field_decl,semi__for_condition_no_update,semi__for_condition_update,semi__for_init_condition,semi__for_init_no_condition,semi__for_no_condition_no_update,semi__for_no_condition_update,semi__for_no_init_condition,semi__for_no_init_no_condition,semi__import,semi__package_decl,semi__statement,semi__static_import,star__type_import_on_demand"/>
      <property name="whitespaceAfter" value="abstract,and__expr,and__type_bound,and_assign,assert,assign__assignment,assign__var_decl,case,catch,class__class_decl,colon__case,colon__default,colon__enhanced_for,colon__labeled_stat,colon__ternary,comma,conditional_and,conditional_or,default__anno_elem,divide,divide_assign,do,ellipsis,else,enum,equal,extends__type,extends__type_bound,final,finally,for,greater,greater_equal,if,implements,import,import__static_import,instanceof,interface,l_curly__anno_array_init,l_curly__anon_class,l_curly__array_init,l_curly__block,l_curly__catch,l_curly__do,l_curly__enum_const,l_curly__finally,l_curly__for,l_curly__if,l_curly__instance_init,l_curly__labeled_stat,l_curly__meth_decl,l_curly__static_init,l_curly__switch,l_curly__synchronized,l_curly__try,l_curly__type_decl,l_curly__while,left_shift,left_shift_assign,less,less_equal,minus__additive,minus_assign,modulo,modulo_assign,multiply,multiply_assign,name__anno_member,native,new,not_equal,or,or_assign,package,plus__additive,plus_assign,private,protected,public,question__ternary,r_angle__meth_decl_type_params,r_curly__block,r_curly__catch,r_curly__do,r_curly__else,r_curly__empty_catch,r_curly__empty_meth_decl,r_curly__empty_type_decl,r_curly__finally,r_curly__for,r_curly__if,r_curly__instance_init,r_curly__labeled_stat,r_curly__meth_decl,r_curly__static_init,r_curly__switch,r_curly__synchronized,r_curly__try,r_curly__type_decl,r_curly__while,r_paren__cast,r_paren__catch,r_paren__if,return__expr,right_shift,right_shift_assign,semi__abstract_meth_decl,semi__anno_elem_decl,semi__empty_stat,semi__enum_decl,semi__field_decl,semi__for_condition_update,semi__for_init_condition,semi__for_no_condition_update,semi__for_no_init_condition,semi__import,semi__package_decl,semi__statement,semi__static_import,semi__type_decl,static__static_import,static__mod,static__static_init,super__type_bound,switch,synchronized__mod,synchronized__synchronized,throw,throws,transient,try,unsigned_right_shift,unsigned_right_shift_assign,volatile,while__do,while__while,xor,xor_assign"/>
      <property name="noWhitespaceAfter" value="at__anno,at__anno_decl,bitwise_complement,default__switch,dot__import,dot__package_decl,dot__qualified_type,dot__selector,l_angle__meth_decl_type_params,l_angle__meth_invocation_type_args,l_angle__type_args,l_angle__type_params,l_brack__array_decl,l_brack__index,l_curly__empty_anno_array_init,l_curly__empty_anon_class,l_curly__empty_array_init,l_curly__empty_catch,l_curly__empty_meth_decl,l_curly__empty_type_decl,l_paren__anno,l_paren__anno_elem_decl,l_paren__cast,l_paren__catch,l_paren__do_while,l_paren__for,l_paren__for_no_init,l_paren__if,l_paren__meth_invocation,l_paren__params,l_paren__parenthesized,logical_complement,minus__unary,name__anno_elem_decl,name__ctor_decl,name__import_component,name__import_type,name__meth_decl,name__package_decl,name__param,plus__unary,pre_decr,pre_incr,r_angle__meth_invocation_type_args,r_paren__do_while,return__no_expr,semi__for_condition_no_update,semi__for_init_no_condition,semi__for_no_condition_no_update,semi__for_no_init_no_condition,star__type_import_on_demand,super__ctor_call,super__expr,this__ctor_call"/>
    </module>
  </module>
  <module name="SuppressionCommentFilter"/>
  <module name="SuppressionFilter">
    <property name="file" value="${config_loc}/suppressions.xml"/>
  </module>
 </module>
